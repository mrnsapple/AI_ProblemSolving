cmake_minimum_required(VERSION 3.5)
project(AI  VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
#find_package(QT NAMES Qt6 Qt5 COMPONENTS Widgets REQUIRED)
#find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets REQUIRED)

if(CMAKE_VERSION VERSION_LESS "3.7.0")
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
endif()
include(CTest)
enable_testing()
include_directories( "C:\\Qt\\5.15.0\\msvc2019_64\\include")
link_directories("C:\\Qt\\5.15.0\\msvc2019_64\\lib") 
set( CMAKE_PREFIX_PATH "C:\\Qt\\5.15.0\\msvc2019_64")
find_package(Qt5 COMPONENTS Widgets REQUIRED)
include_directories(BackEnd/Private)
include_directories(UI/Private)
include_directories("C:\\Qt\\5.15.0\\msvc2019_64\\lib\\cmake")
set(path "C:/Qt/5.15.0/msvc2019_64/lib/cmake/")

#include(${path}Qt5Gui/Qt5Gui_QICNSPlugin.cmake)
#include(${path}Qt5Gui/Qt5Gui_QICOPlugin.cmake)
#include(${path}Qt5Gui/Qt5Gui_QJepgPlugin.cmake)

add_library(AILib
    SHARED
    main.cpp
    BackEnd/Private/BreadthFirstSearch/BreadthFirstSearchAlgorithm.cpp
    BackEnd/Private/ProblemGenerators/Puzzle/PuzzleGenerator.cpp
    BackEnd/Private/BreadthFirstSearch/BreadthFirstSearchQueenLogic.cpp
    BackEnd/Private/BreadthFirstSearch/BreadthFirstSearchPuzzleLogic.cpp
    BackEnd/Private/AStar/AStarSearchAlgorithm.cpp
    BackEnd/Private/Utilities.cpp)


add_executable(AI
                main.cpp
                BackEnd/Private/BreadthFirstSearch/BreadthFirstSearchAlgorithm.cpp
                BackEnd/Private/ProblemGenerators/Puzzle/PuzzleGenerator.cpp
                BackEnd/Private/BreadthFirstSearch/BreadthFirstSearchQueenLogic.cpp
                BackEnd/Private/BreadthFirstSearch/BreadthFirstSearchPuzzleLogic.cpp
                BackEnd/Private/AStar/AStarSearchAlgorithm.cpp
                BackEnd/Private/Utilities.cpp
)


#target_include_directories(AI PUBLIC "C:/Qt/5.15.0/mingw81_64/include/QtWidgets")
target_link_libraries(AI PRIVATE Qt5::Widgets)
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
